#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""created 14.04.2021
@author: holger mohr
"""

from ale_python_interface import ALEInterface
import numpy as np
from PIL import Image
import torch
from torch import nn


def play_at_15hz(action, screen_height, screen_width, ale):
    
    screen_vec_1 = np.empty((screen_height, screen_width, 3), dtype=np.uint8)
    screen_vec_2 = np.empty((screen_height, screen_width, 3), dtype=np.uint8)
    
    reward_sum = 0
    
    reward = ale.act(action)
    reward_sum = reward_sum + reward
    
    reward = ale.act(action)
    reward_sum = reward_sum + reward
    
    reward = ale.act(action)
    reward_sum = reward_sum + reward
    ale.getScreenRGB(screen_vec_1)
    
    reward = ale.act(action)
    reward_sum = reward_sum + reward
    ale.getScreenRGB(screen_vec_2)
    
    screen_R_max = np.amax(np.dstack((screen_vec_1[:,:,0], screen_vec_2[:,:,0])), axis=2)
    screen_G_max = np.amax(np.dstack((screen_vec_1[:,:,1], screen_vec_2[:,:,1])), axis=2)
    screen_B_max = np.amax(np.dstack((screen_vec_1[:,:,2], screen_vec_2[:,:,2])), axis=2)
    
    screen_max = np.dstack((screen_R_max, screen_G_max, screen_B_max))
    
    return screen_max, reward_sum


def preproc_screen(screen_np_in):
    
    screen_image = Image.fromarray(screen_np_in, 'RGB')
    screen_ycbcr = screen_image.convert('YCbCr')
    screen_y = screen_ycbcr.getchannel(0)
    screen_y_84x84 = screen_y.resize((84, 84), resample=Image.BILINEAR)
    screen_y_84x84_float_rescaled_np = np.array(screen_y_84x84, dtype=np.float32)/255
    
    return screen_y_84x84_float_rescaled_np


def nn_init():
    
    class NeuralNetwork(nn.Module):
        def __init__(self):
            super(NeuralNetwork, self).__init__()
            
            self.conv = nn.Sequential(
                nn.Conv2d(in_channels=4, out_channels=32, kernel_size=8, stride=4),
                nn.ReLU(),
                nn.Conv2d(in_channels=32, out_channels=64, kernel_size=4, stride=2),
                nn.ReLU(),
                nn.Conv2d(in_channels=64, out_channels=64, kernel_size=3, stride=1),
                nn.ReLU(),
                nn.Flatten(),
                nn.Linear(3136, 512),
                nn.ReLU(),
                nn.Linear(512, 6))
        
        def forward(self, x):
            conv_out = self.conv(x)
            return conv_out
    
    model = NeuralNetwork().to("cuda")
    print(model)
    return model

def main():
    
    ale = ALEInterface()
    
    ale.loadROM(str.encode('/workspace/container_mount/roms/space_invaders.bin'))
    
    legal_actions = ale.getLegalActionSet()
    
    print(legal_actions)
    
    (screen_width,screen_height) = ale.getScreenDims()
    print("width/height: " +str(screen_width) + "/" + str(screen_height))
    
    screen_vec = np.empty((screen_height, screen_width, 3), dtype=np.uint8)
    
    n_steps_15hz = 20000
    
    #screen_mat = np.empty((screen_height, screen_width, 3, n_steps_15hz), dtype=np.uint8)
    screen_mat = np.empty((84, 84, n_steps_15hz), dtype=np.float32)
    
    random_network = nn_init()
    print('random network')
    print(random_network)
    
    #cuda0 = torch.device('cuda:0')
    
    for i in range(n_steps_15hz):
        screen_vec, reward = play_at_15hz(0, screen_height, screen_width, ale)
        screen_preproc = preproc_screen(screen_vec)
        #screen_mat[:,:,:,i] = screen_vec
        screen_mat[:,:,i] = screen_preproc
        
        if i == 0:
            screen_4_frames = np.dstack((screen_mat[:,:,i], np.zeros((84,84,3), dtype=np.float32)))
        elif i == 1:
            screen_4_frames = np.dstack((screen_mat[:,:,i], screen_mat[:,:,i-1], np.zeros((84,84,2), dtype=np.float32)))
        elif i == 2:
            screen_4_frames = np.dstack((screen_mat[:,:,i], screen_mat[:,:,i-1], screen_mat[:,:,i-2], np.zeros((84,84,1), dtype=np.float32)))
        else:
            screen_4_frames = np.dstack((screen_mat[:,:,i], screen_mat[:,:,i-1], screen_mat[:,:,i-2], screen_mat[:,:,i-3]))
        
        screen_4_frames_tensor = torch.from_numpy(screen_4_frames).cuda()
        #print(screen_4_frames_tensor.size())
        screen_4_frames_tensor_permute = screen_4_frames_tensor.permute(2, 0, 1)
        #print(screen_4_frames_tensor_permute.size())
        #print((screen_4_frames_tensor_permute[None, ...]).size())
        random_network_out = random_network((screen_4_frames_tensor_permute[None, ...]))
    
    #with open('test.npy', 'wb') as f:
    #    np.save(f, screen_mat)


if __name__ == '__main__':
    main()
